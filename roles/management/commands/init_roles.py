# roles/management/commands/init_roles.py - Inicializar Roles y √Åreas
from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from roles.models import AreaTrabajo, RolUsuario, PerfilUsuario

class Command(BaseCommand):
    help = 'Inicializar √°reas de trabajo y roles del sistema WinFibra'

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üöÄ Inicializando sistema de roles WinFibra...')
        )

        # 1. Crear √Åreas de Trabajo
        areas_data = [
            {
                'codigo': 'comercial',
                'nombre': '√Årea Comercial',
                'descripcion': 'Encargada de la captaci√≥n de clientes y creaci√≥n de proyectos comerciales'
            },
            {
                'codigo': 'planificacion',
                'nombre': '√Årea de Planificaci√≥n',
                'descripcion': 'Responsable del registro de hilos y asignaci√≥n a edificios'
            },
            {
                'codigo': 'construccion',
                'nombre': '√Årea de Construcci√≥n',
                'descripcion': 'Ejecuta los proyectos y realiza la instalaci√≥n f√≠sica'
            },
            {
                'codigo': 'administracion',
                'nombre': 'Administraci√≥n',
                'descripcion': 'Gesti√≥n general del sistema y supervisi√≥n'
            }
        ]

        self.stdout.write('üìã Creando √°reas de trabajo...')
        for area_info in areas_data:
            area, created = AreaTrabajo.objects.get_or_create(
                codigo=area_info['codigo'],
                defaults={
                    'nombre': area_info['nombre'],
                    'descripcion': area_info['descripcion'],
                    'activa': True
                }
            )
            if created:
                self.stdout.write(f'   ‚úÖ √Årea creada: {area.nombre}')
            else:
                self.stdout.write(f'   ‚ÑπÔ∏è  √Årea existe: {area.nombre}')

        # 2. Crear Roles
        roles_data = [
            # √Årea Comercial
            {
                'codigo': 'comercial',
                'nombre': 'Comercial',
                'area_codigo': 'comercial',
                'descripcion': 'Crea proyectos comerciales y gestiona clientes',
                'permisos': {
                    'puede_crear_proyectos': True,
                    'puede_editar_proyectos': True,
                    'puede_ver_dashboard': True,
                    'puede_ver_analytics': True,
                }
            },
            {
                'codigo': 'supervisor_comercial',
                'nombre': 'Supervisor Comercial',
                'area_codigo': 'comercial',
                'descripcion': 'Supervisa el √°rea comercial y todos los proyectos',
                'permisos': {
                    'puede_crear_proyectos': True,
                    'puede_editar_proyectos': True,
                    'puede_ver_dashboard': True,
                    'puede_ver_analytics': True,
                    'puede_ver_mapa_mufas': True,
                }
            },
            
            # √Årea de Planificaci√≥n
            {
                'codigo': 'planificador',
                'nombre': 'Planificador',
                'area_codigo': 'planificacion',
                'descripcion': 'Registra hilos y los asigna a edificios',
                'permisos': {
                    'puede_asignar_hilos': True,
                    'puede_ver_mapa_mufas': True,
                    'puede_ver_dashboard': True,
                }
            },
            {
                'codigo': 'supervisor_planificacion',
                'nombre': 'Supervisor de Planificaci√≥n',
                'area_codigo': 'planificacion',
                'descripcion': 'Supervisa la planificaci√≥n y asignaci√≥n de recursos',
                'permisos': {
                    'puede_asignar_hilos': True,
                    'puede_ver_mapa_mufas': True,
                    'puede_ver_dashboard': True,
                    'puede_ver_analytics': True,
                    'puede_editar_proyectos': True,
                }
            },
            
            # √Årea de Construcci√≥n
            {
                'codigo': 'constructor',
                'nombre': 'Constructor',
                'area_codigo': 'construccion',
                'descripcion': 'Ejecuta proyectos y visualiza hilos asignados',
                'permisos': {
                    'puede_ver_mapa_mufas': True,
                    'puede_ver_dashboard': True,
                }
            },
            {
                'codigo': 'supervisor_construccion',
                'nombre': 'Supervisor de Construcci√≥n',
                'area_codigo': 'construccion',
                'descripcion': 'Supervisa la construcci√≥n y ejecuci√≥n de proyectos',
                'permisos': {
                    'puede_ver_mapa_mufas': True,
                    'puede_ver_dashboard': True,
                    'puede_ver_analytics': True,
                    'puede_editar_proyectos': True,
                }
            },
            
            # Administraci√≥n
            {
                'codigo': 'admin_sistema',
                'nombre': 'Administrador del Sistema',
                'area_codigo': 'administracion',
                'descripcion': 'Acceso completo al sistema',
                'permisos': {
                    'puede_crear_proyectos': True,
                    'puede_editar_proyectos': True,
                    'puede_asignar_hilos': True,
                    'puede_ver_dashboard': True,
                    'puede_ver_mapa_mufas': True,
                    'puede_ver_analytics': True,
                }
            }
        ]

        self.stdout.write('üë• Creando roles de usuario...')
        for rol_info in roles_data:
            area = AreaTrabajo.objects.get(codigo=rol_info['area_codigo'])
            rol, created = RolUsuario.objects.get_or_create(
                codigo=rol_info['codigo'],
                defaults={
                    'nombre': rol_info['nombre'],
                    'area': area,
                    'descripcion': rol_info['descripcion']
                }
            )
            if created:
                self.stdout.write(f'   ‚úÖ Rol creado: {rol.nombre} ({area.nombre})')
            else:
                self.stdout.write(f'   ‚ÑπÔ∏è  Rol existe: {rol.nombre} ({area.nombre})')

        # 3. Asignar rol de administrador al usuario admin si existe
        try:
            admin_user = User.objects.get(username='admin')
            admin_rol = RolUsuario.objects.get(codigo='admin_sistema')
            
            perfil, created = PerfilUsuario.objects.get_or_create(
                usuario=admin_user,
                defaults={
                    'rol': admin_rol,
                    'activo': True,
                    'puede_crear_proyectos': True,
                    'puede_editar_proyectos': True,
                    'puede_asignar_hilos': True,
                    'puede_ver_dashboard': True,
                    'puede_ver_mapa_mufas': True,
                    'puede_ver_analytics': True,
                }
            )
            
            if created:
                self.stdout.write(f'   ‚úÖ Perfil admin creado: {perfil}')
            else:
                # Actualizar permisos si ya existe
                perfil.rol = admin_rol
                perfil.puede_crear_proyectos = True
                perfil.puede_editar_proyectos = True
                perfil.puede_asignar_hilos = True
                perfil.puede_ver_dashboard = True
                perfil.puede_ver_mapa_mufas = True
                perfil.puede_ver_analytics = True
                perfil.save()
                self.stdout.write(f'   üîÑ Perfil admin actualizado: {perfil}')
                
        except User.DoesNotExist:
            self.stdout.write('   ‚ö†Ô∏è  Usuario admin no encontrado')

        # 4. Mostrar resumen
        self.stdout.write('\nüìä RESUMEN:')
        self.stdout.write(f'   üìã √Åreas creadas: {AreaTrabajo.objects.count()}')
        self.stdout.write(f'   üë• Roles creados: {RolUsuario.objects.count()}')
        self.stdout.write(f'   üë§ Perfiles de usuario: {PerfilUsuario.objects.count()}')

        # 5. Mostrar roles por √°rea
        self.stdout.write('\nüè¢ ROLES POR √ÅREA:')
        for area in AreaTrabajo.objects.all():
            self.stdout.write(f'   {area.nombre}:')
            for rol in area.roles.all():
                usuarios_count = rol.usuarios.count()
                self.stdout.write(f'      ‚Ä¢ {rol.nombre} ({usuarios_count} usuarios)')

        self.stdout.write('\nüéâ ¬°Sistema de roles inicializado correctamente!')
        self.stdout.write('üí° Usa el admin de Django para gestionar usuarios y asignar roles.')
        
        # Instrucciones
        self.stdout.write('\nüìù PR√ìXIMOS PASOS:')
        self.stdout.write('   1. Crear usuarios desde el admin: /admin/auth/user/')
        self.stdout.write('   2. Asignar roles en la secci√≥n "Perfil del Usuario"')
        self.stdout.write('   3. Las interfaces se adaptar√°n autom√°ticamente seg√∫n el rol')